/* global define */

(function () {

	/**
	 * Collectionjs
	 */
	var Collection = function (name, items) {

		this.name = name;

		this._callbacks = {};
		this._q = items || [];

	};

	Collection.prototype.toString = function () {
		return this._q.toString();
	}

	Collection.prototype.toArray = function () {
		return this._q;
	}

	Collection.prototype.diff = function (collection) {
		var self = this;

		return {
			append: collection.toArray().filter(function(i) {return self._q.indexOf(i) < 0;}),
			remove: self._q.filter(function(i) {return collection.toArray().indexOf(i) < 0;}),
			both  : self._q.filter(function(i) {return collection.toArray().indexOf(i) >= 0;}),
		}
	}

	Collection.prototype.on = function (name, callback) {
		if (typeof this._callbacks[name] === 'undefined') {
			this._callbacks[name] = [];
		}

		this._callbacks[name].push(callback);

		return this;
	};

	Collection.prototype.trigger = function (name, params) {
		if (typeof this._callbacks[name] !== 'undefined') {
			this._callbacks[name].forEach(function (cb) { cb.apply(this, params); });
		}
	};

	Collection.prototype.indexed = function (index) {
		var indexed = {};

		this._q.forEach(function (obj) {
			if (obj[index]) { indexed[obj[index]] = obj; }
		});

		return indexed;
	};

	Collection.prototype.each = function (callback) {
		this._q.forEach(callback);
	};

	Collection.prototype.add = function (obj) {
		if (!this.exists(obj)) {
			this._q.push(obj);

			this.trigger('add', [obj]);
			this.trigger('change', [obj, true]);

			return true;
		}

		return false;
	};

	Collection.prototype.addMany = function (items) {
		for (i = 0; i < items.length; i++) {
			this.add(items[i]);
		}

		return this;
	};

	Collection.prototype.remove = function (obj) {
		var index = this._q.indexOf(obj);

		if (index >= 0) {
			this._q.splice(index, 1);

			this.trigger('remove', [obj]);
			this.trigger('change', [obj, false]);

			return obj;
		}

		return undefined;
	};

	Collection.prototype.get = function () {
		return this.remove(this._q[0]);
	};

	Collection.prototype.exists = function (obj) {
		return this._q.indexOf(obj) >= 0;
	};

	Collection.prototype.contains = function (obj) {
		return this.exists(obj);
	};

	Collection.prototype.list = function () {
		return this._q;
	};

	Collection.prototype.count = function () {
		return this._q.length;
	};

	/**
	 * Export
	 */
	if (typeof module !== 'undefined' && module.exports) {
		module.exports = Collection;
	} else if (typeof define === 'function') {
		define(function() { return Collection; });
	} else {
		window.Collection = Collection;
	}

})();
